
* anal

[[https://hackage.haskell.org/package/anal][https://img.shields.io/hackage/v/anal.svg]]
[[https://github.com/tonyday567/anal/actions?query=workflow%3Ahaskell-ci][https://github.com/tonyday567/anal/workflows/haskell-ci/badge.svg]]

analysis: the prefix

* Setup

#+begin_src haskell :results output
:r
:set prompt "> "
:set -Wno-type-defaults
:set -Wno-name-shadowing
:set -XOverloadedLabels
:set -XOverloadedStrings
:set -XRebindableSyntax
:set -XTupleSections
import Anal
import Anal.Returns
import qualified FlatParse.Basic as FP
import Data.Time
import Data.Time.Calendar
import qualified Data.ByteString as BS
import qualified Data.ByteString.Char8 as C
import Data.Mealy
import Data.Profunctor
import Data.Maybe
import Data.Bifunctor
import NumHask.Prelude hiding (fold)
import qualified Data.Map as Map
import Data.FormatN
import qualified Data.Text as Text
import Prettychart
import Chart
import qualified Prelude as P
import GHC.OverloadedLabels
import Optics.Core
import Control.Category ((>>>))
import Control.Applicative
print "imports loaded"
r <- getReturns
length r
(display, quit) <- serve
disp x = display $ x & set (#markupOptions % #markupHeight) 250 & set (#hudOptions % #frames % ix 1 % _2 % #buffer) 0.1
#+end_src

#+RESULTS:
#+begin_example
Preprocessing library for anal-0.0.2..
GHCi, version 9.6.2: https://www.haskell.org/ghc/  :? for help
[1 of 2] Compiling Anal             ( src/Anal.hs, interpreted )

src/Anal.hs:83:5: warning: [GHC-63397] [-Wname-shadowing]
    This binding for ‘qRangeLabel’ shadows the existing binding
      defined at src/Anal.hs:110:1
   |
83 |     qRangeLabel = fold
   |     ^^^^^^^^^^^
[2 of 2] Compiling Anal.Returns     ( src/Anal/Returns.hs, interpreted )
Ok, two modules loaded.
ghci
Ok, two modules loaded.
ghci
imports loaded
10897
Setting phasers
to stun... (port 9160) (ctrl-c to quit)
#+end_example

* analysis
*** Accumulated return

#+begin_src haskell :results output
space1 (fst <$> r) :: Maybe (Range Day)
accret = scan (second' (dipure (+))) r
decay = 0.01
rs = snd <$> r
xma = scan (ma decay) rs
xstd = scan (std decay) rs
disp $ dayChart ["accumulated return"] (fmap (second (:[])) (taker 200 accret))

#+end_src

#+RESULTS:
: Just Range 1980-01-02 2023-03-17
: True

*** median versus average
**** mean versus 40th, 50th, 60th quantiles

#+begin_src haskell :file other/mvq.svg :results output graphics file :exports both
mvq = (second' ((\a b -> a:(b!!1-a):b) <$> ma 0.99 <*> Data.Mealy.Quantiles.quantiles 0.99 [0.4,0.5,0.6]))

c = dayChart ["mean", "skew", "40th", "median", "60th"] (drop 1000 $ scan mvq (taker 2000 r))
disp c
writeChartOptions "other/mvq.svg" c

 #+end_src

#+RESULTS:
[[file:other/mvq.svg]]

**** medium minus mean

#+begin_src haskell :file other/mvm.svg :results output graphics file :exports both
mvm = second' ((\a b -> b - a) <$> ma 0.99 <*> median 0.99)
mvmChart = dayChart ["median - mean"] (drop 1000 $ fmap (second (:[])) $ scan mvm (taker 2000 r))
disp mvmChart
writeChartOptions "other/mvm.svg" mvmChart
 #+end_src

#+RESULTS:
[[file:other/mvm.svg]]

*** digitize median versus mean

#+begin_src haskell :file other/mvmd.svg :results output graphics file :exports both
qs = [0.2,0.4,0.6,0.8]
mvmd = ((-) <$> median 0.99 <*> ma 0.99) >>> digitize 0.996 qs
d = drop 1000 $ scan (second' mvmd) (taker 2000 r)
mvmdChart = digitChart ((\x -> UTCTime x (P.fromInteger 0)) . fst <$> d) (fromIntegral . snd <$> d) (quantileNames qs)
disp mvmdChart
writeChartOptions "other/mvmd.svg" mvmdChart
 #+end_src

#+RESULTS:
[[file:other/mvmd.svg]]

* trading signals

(Today's return, Yesterday's signal)

#+begin_src haskell :results output
n = 2000
pren = 1000
mvmRaw = (\a b -> a-b) <$> median 0.99 <*> ma 0.99
qs = [0.1,0.4,0.5,0.6,0.9]
d = scanRet (sigRet mvmRaw qs 0.996) n pren r
take 10 d
#+end_src

#+RESULTS:
: [(2015-04-09,(4.448e-3,0)),(2015-04-10,(5.189e-3,0)),(2015-04-13,(-4.592e-3,0)),(2015-04-14,(1.628e-3,0)),(2015-04-15,(5.135e-3,0)),(2015-04-16,(-7.79e-4,0)),(2015-04-17,(-1.1376e-2,0)),(2015-04-20,(9.193e-3,1)),(2015-04-21,(-1.482e-3,1)),(2015-04-22,(5.075e-3,1))]


#+begin_src haskell :results output
Data.Mealy.fold countM (snd . snd <$> d)
#+end_src

#+RESULTS:
: fromList [(0,234),(1,782),(2,758),(3,226)]

cumulative return for each bucket

#+begin_src haskell :file other/arc.svg :results output graphics file :exports both
n = 1000
ndrop = 0
mvmRaw = (\a b -> a-b) <$> median 0.99 <*> ma 0.99
qs = [0.1,0.4,0.5,0.6,0.9]
c = dayChart (qRangeLabel qs) (scanRet (fmap (ardList 6) (sigRet mvmRaw qs 0.996 >>> accRetDigits)) n ndrop r)
writeChartOptions "other/arc.svg" c
disp c
#+end_src

#+RESULTS:
[[file:other/arc.svg]]
