
* anal

[[https://hackage.haskell.org/package/anal][https://img.shields.io/hackage/v/anal.svg]]
[[https://github.com/tonyday567/anal/actions?query=workflow%3Ahaskell-ci][https://github.com/tonyday567/anal/workflows/haskell-ci/badge.svg]]

analysis: the prefix

* Setup

#+begin_src haskell :results output
:r
:set prompt "> "
:set -Wno-type-defaults
:set -Wno-name-shadowing
:set -XOverloadedLabels
:set -XOverloadedStrings
:set -XRebindableSyntax
:set -XTupleSections
import Anal
import Anal.Returns
import qualified FlatParse.Basic as FP
import Data.Time
import Data.Time.Calendar
import qualified Data.ByteString as BS
import qualified Data.ByteString.Char8 as C
import Data.Mealy
import Data.Profunctor
import Data.Maybe
import Data.Bifunctor
import NumHask.Prelude hiding (fold)
import qualified Data.Map as Map
import qualified Data.Text as Text
import Prettychart
import Chart
import qualified Prelude as P
import GHC.OverloadedLabels
import Optics.Core
import Control.Category ((>>>))
import Control.Applicative
import Chart.Compound
print "imports loaded"
r <- getReturns
length r
(display, quit) <- serve
disp x = display $ x & set (#markupOptions % #markupHeight) 250 & set (#hudOptions % #frames % ix 1 % _2 % #buffer) 0.1
#+end_src

#+RESULTS:
: Ok, two modules loaded.
: ghci
: imports loaded
: 10897
: Setting phasers to stun... (p>o rt 9160) (ctrl-c to quit)

* analysis
*** Accumulated return

#+begin_src haskell :results output
space1 (fst <$> r) :: Maybe (Range Day)
accret = scan (second' (dipure (+))) r
decay = 0.01
rs = snd <$> r
xma = scan (ma decay) rs
xstd = scan (std decay) rs
disp $ dayChart ["accumulated return"] (fmap (second (:[])) (taker 200 accret))
#+end_src

#+RESULTS:
: Just Range 1980-01-02 2023-03-17
: True

*** median versus average
**** mean versus 40th, 50th, 60th quantiles

#+begin_src haskell :file other/mvq.svg :results output graphics file :exports both
mvq = (second' ((\a b -> a:(b!!1-a):b) <$> ma 0.99 <*> Data.Mealy.Quantiles.quantiles 0.99 [0.4,0.5,0.6]))

c = dayChart ["mean", "skew", "40th", "median", "60th"] (drop 1000 $ scan mvq (taker 2000 r))
disp c
writeChartOptions "other/mvq.svg" c

 #+end_src

#+RESULTS:
[[file:other/mvq.svg]]

**** medium minus mean

#+begin_src haskell :file other/mvm.svg :results output graphics file :exports both
mvm = second' ((\a b -> b - a) <$> ma 0.99 <*> median 0.99)
mvmChart = dayChart ["median - mean"] (drop 1000 $ fmap (second (:[])) $ scan mvm (taker 2000 r))
disp mvmChart
writeChartOptions "other/mvm.svg" mvmChart
 #+end_src

#+RESULTS:
[[file:other/mvm.svg]]

*** digitize median versus mean

#+begin_src haskell :file other/mvmd.svg :results output graphics file :exports both
qs = [0.2,0.4,0.6,0.8]
mvmd = ((-) <$> median 0.99 <*> ma 0.99) >>> digitize 0.996 qs
d = drop 1000 $ scan (second' mvmd) (taker 2000 r)
mvmdChart = digitChart ((\x -> UTCTime x (P.fromInteger 0)) . fst <$> d) (fromIntegral . snd <$> d) (quantileNames qs)
disp mvmdChart
writeChartOptions "other/mvmd.svg" mvmdChart
 #+end_src

#+RESULTS:
[[file:other/mvmd.svg]]

* trading signals

(Today's return, Yesterday's signal)

#+begin_src haskell :results output
n = 2000
pren = 1000
mvmRaw = (\a b -> a-b) <$> median 0.99 <*> ma 0.99
qs = [0.1,0.4,0.5,0.6,0.9]
d = scanRet (sigRet mvmRaw qs 0.996) n pren r
take 10 d
#+end_src

#+RESULTS:
: [(2015-04-09,(4.448e-3,0)),(2015-04-10,(5.189e-3,0)),(2015-04-13,(-4.592e-3,0)),(2015-04-14,(1.628e-3,0)),(2015-04-15,(5.135e-3,0)),(2015-04-16,(-7.79e-4,0)),(2015-04-17,(-1.1376e-2,0)),(2015-04-20,(9.193e-3,1)),(2015-04-21,(-1.482e-3,1)),(2015-04-22,(5.075e-3,1))]


#+begin_src haskell :results output
Data.Mealy.fold countM (snd . snd <$> d)
#+end_src

#+RESULTS:
: fromList [(0,234),(1,782),(2,758),(3,226)]

cumulative return for each bucket

#+begin_src haskell :file other/arc.svg :results output graphics file :exports both
n = 1000
ndrop = 0
mvmRaw = (\a b -> a-b) <$> median 0.99 <*> ma 0.99
qs = [0.1,0.4,0.5,0.6,0.9]
c = dayChart (qRangeLabel qs) (scanRet (fmap (ardList 6) (sigRet mvmRaw qs 0.996 >>> accRetDigits)) n ndrop r)
c = c & #markupOptions % renderStyle .~ Indented 4
writeChartOptions "other/arc.svg" c
disp c
#+end_src

#+RESULTS:
[[file:other/arc.svg]]
* standard deviation
** working

#+begin_src haskell :file other/sd.svg :results output graphics file :exports both
accret = scan (second' (dipure (+))) r
rebase xs = zip (fst <$> xs) (fmap (/head (snd <$> xs)) (snd <$> xs))

accChart = dayChart ["accumulated return"] (fmap (second (:[])) (rebase $ drop dropN $ taker (n+dropN) accret)) & set (#hudOptions % #legends) []
accChart' = accChart & over (#hudOptions % #axes) (fmap (second (set ( #ticks % #ltick ) Nothing))) & over (#charts % charts') (fmap (colourChart (const (palette1 2)))) & set (#hudOptions % #legends) []

sdChart = dayChart ["std"] $ second (:[]) <$> scanRet (std decay) n dropN r
sdChart' = sdChart & #hudOptions .~ (mempty & #axes .~ (view (#hudOptions % #axes) sdChart & (\x -> (List.!!) x 1) & second (set #place PlaceRight) & (:[]))) & over (#hudOptions % #axes) (fmap (second (set ( #ticks % #ltick ) Nothing)))

compChart = compoundMerge [accChart', sdChart']
compChart' = compChart & set (#hudOptions % #legends) [(Priority 20,defaultLegendOptions & set #legendCharts (zipWith (\t co -> (t, foldOf (#charts % charts') co)) ["return", "sd"] [accChart', sdChart']))]
writeChartOptions "other/sd.svg" compChart'

disp compChart'
#+end_src

#+RESULTS:
[[file:other/sd.svg]]

** gradient of sd

#+begin_src haskell :results output
stdBeta = dayChart ["std"] $ second (:[]) <$> scanRet (second' (std decayStd) >>> beta1 (ma decayBeta1)) n dropN (zip (fst <$> r) (zip [0..] (snd <$> r)))
stdBeta' = stdBeta & over (#hudOptions % #axes) (fmap (second (set ( #ticks % #ltick ) Nothing))) & over (#charts % charts') (fmap (colourChart (const (palette1 2))))  & set (#hudOptions % #legends) []

betaSdChart = compoundMerge [sdChart', stdBeta']
betaSdChart' = betaSdChart & set (#hudOptions % #legends) [(Priority 20,defaultLegendOptions & set #legendCharts (zipWith (\t co -> (t, foldOf (#charts % charts') co)) ["beta of sd", "sd"] [stdBeta', sdChart']))]
disp betaSdChart'
#+end_src

#+RESULTS:
: >
: True

*** digitize beta

#+begin_src haskell :results output
qs = [0.2,0.4,0.6,0.8]
qBeta = (second' (std d) >>> beta1 (ma 0.95)) >>> digitize 0.996 qs
:t qBeta
d = drop dropN $ scan (second' qBeta) (taker (n+dropN) $ (zip (fst <$> r) (zip [0..] (snd <$> r))))
betaSdDigitChart = digitChart ((\x -> UTCTime x (P.fromInteger 0)) . fst <$> d) (fromIntegral . snd <$> d) (quantileNames qs)
disp betaSdDigitChart
#+end_src

#+RESULTS:
: qBeta :: Mealy (Double, Double) Int
: True



#+begin_src haskell :results output
:t d
#+end_src

#+RESULTS:
: d :: [(Day, Int)]


Skew away from upper quantiles

#+begin_src haskell :results output
Data.Mealy.fold countM (snd <$> d)
#+end_src

#+RESULTS:
: fromList [(0,892),(1,813),(2,1191),(3,1072),(4,1032)]

#+begin_src haskell :results output graphics file :exports both
acc = dayChartRhs (fmap (second (:[])) (rebase $ drop dropN $ taker (n+dropN) accret))
acc' = acc & over (#hudOptions % #axes) (fmap (second (set ( #ticks % #ltick ) Nothing))) & over (#charts % charts') (fmap (colourChart (const (palette1 4))))
c = dayChart (qRangeLabel qs) (scanRet (fmap (ardList 6) (sigRet mvmRaw qs 0.996 >>> accRetDigits)) n ndrop r)

disp $ compoundMerge [c, acc']
#+end_src

#+begin_src haskell :results output
:t d
#+end_src

#+RESULTS:
: d :: [(Day, Int)]

#+begin_src haskell :results output
n = 2000
dropN = 100
qs = [0.1, 0.9] :: [Double]
decayStd = 0.95
decayBeta1 = 0.95
decayQ = 0.95
qBeta' = (first snd) <$> ((,) <$> id <*> (second' (std decayStd) >>> beta1 (ma decayBeta1) >>> digitize decayQ qs >>> delay1 0))
buckets = fmap (ardList ((length qs :: Int) + 1)) (qBeta' >>> accRetDigits)
xs = (drop dropN $ scan (second' buckets) (taker (n+dropN) $ (zip (fst <$> r) (zip [0..] (snd <$> r)))))
bucketChart = dayChart (qRangeLabel qs) xs
disp bucketChart
#+end_src

#+RESULTS:
: > True


*** vert

#+begin_src haskell :results output
:t stack 2 0.1
:t c
:t stack 2 0.1 [(\c -> addHud (view #hudOptions c) (view #charts c)) c]
#+end_src

#+RESULTS:
: stack 2 0.1 :: [ChartTree] -> ChartTree
: c :: ChartOptions
: stack 2 0.1 [(\c -> addHud (view #hudOptions c) (view #charts c)) c]
:   :: ChartTree

#+begin_src haskell :results output
qBeta = (second' (std decayStd) >>> beta1 (ma decayBeta1)) >>> digitize decayQ qs
d = drop dropN $ scan (second' qBeta) (taker (n+dropN) $ (zip (fst <$> r) (zip [0..] (snd <$> r))))
betaSdDigitChart = digitChart ((\x -> UTCTime x (P.fromInteger 0)) . fst <$> d) (fromIntegral . snd <$> d) (quantileNames qs)
disp betaSdDigitChart
#+end_src

#+RESULTS:
: True


#+begin_src haskell :results output
toCT co = addHud (view #hudOptions co) (view #charts co)
#+end_src

#+RESULTS:

#+begin_src haskell :results output
disp $ mempty & #charts .~ stack 2 0.1 [toCT bucketChart, toCT compChart', toCT betaSdDigitChart, toCT betaSdChart', toCT decayChart]
#+end_src

#+RESULTS:
: <interactive>:156:64: error: [GHC-88464]
:     Variable not in scope: compChart'
:
: <interactive>:156:81: error: [GHC-88464]
:     Variable not in scope: betaSdDigitChart
:
: <interactive>:156:104: error: [GHC-88464]
:     Variable not in scope: betaSdChart'

#+begin_src haskell :results output
ts = pack <$> ["std decay = " <> show decayStd, "beta1 decay = " <> show decayBeta1, "quantile decay = " <> show decayQ]
s = defaultTextStyle & #anchor .~ AnchorStart
ts' = [TextChart s (zipWith (\t x -> (t, Point 0 x)) ts [0..])]
decayChart = mempty & #charts .~ unnamed (ts' <> [padChart 0.2 ts']) :: ChartOptions
#+end_src

#+RESULTS:

#+begin_src haskell :results output
#+end_src

#+RESULTS:

#+begin_src haskell :results output
styleBoxes ts'
#+end_src

#+RESULTS:
: Just Rect -0.432 2.567 -3.6000000000000004e-2 2.096

* Next all in one

#+begin_src haskell :results output
-- parameters
n = 2000
dropN = 100
qs = [0.1, 0.5, 0.8] :: [Double]
decayStd = 0.95
decayBeta1 = 0.99
decayQ = 0.996
ri = zip [0..] (snd <$> r)
days = reindex n dropN id (fst <$> r)

accChart = lchart Nothing (palette1 0) (rebase n dropN (scan (dipure (+)) (snd <$> r)))

finishHud = #axes %~ (<> [dayAxis days]) >>> #frames %~ (<> [(Priority 30, defaultFrameOptions & #buffer .~ 0.1)]) :: HudOptions -> HudOptions

sdChart = lchart (Just PlaceLeft) (palette1 1) (reindex n dropN (scan (std decayStd)) (snd <$> r))

betaChart = lchart (Just PlaceRight) (palette1 2) (reindex n dropN (scan (second' (std decayStd) >>> beta1 (ma decayBeta1))) ri)

qBeta = (second' (std decayStd) >>> beta1 (ma decayBeta1)) >>> digitize decayQ qs
rDigit = reindex n dropN (scan qBeta) ri
qBetaChart = digitChart ((\x -> UTCTime x (P.fromInteger 0)) <$> days) (fromIntegral <$> rDigit) (quantileNames qs)

sdCharts = compoundMerge [sdChart,betaChart, accChart & #hudOptions %~ finishHud]

cs = Data.Mealy.fold countM (rDigit)
qCountChart = barChart defaultBarOptions (BarData [fromIntegral <$> toList cs] (qRangeLabel qs) []) & #hudOptions % #frames %~ (<> [(Priority 30, defaultFrameOptions & #buffer .~ 0.2)]) & #hudOptions % #titles %~ (<> [(Priority 10, defaultTitle "quantile counts" & #buffer .~ 0.2 & #style % #color .~ palette1a 1 1)])

qBeta' = (first snd) <$> ((,) <$> id <*> (second' (std decayStd) >>> beta1 (ma decayBeta1) >>> digitize decayQ qs >>> delay1 0))
buckets = fmap (ardList ((length qs :: Int) + 1)) (qBeta' >>> accRetDigits)
xs = (drop dropN $ scan (second' buckets) (taker (n+dropN) $ (zip (fst <$> r) (zip [0..] (snd <$> r)))))
bucketChart = dayChart (qRangeLabel qs) xs

ts = pack <$> reverse ["std decay = " <> show decayStd, "beta1 decay = " <> show decayBeta1, "quantile decay = " <> show decayQ, "quantiles = " <> show qs]
s = defaultTextStyle & #anchor .~ AnchorStart
ts' = [TextChart s (zipWith (\t x -> (t, Point 0 x)) ts [0..])]
decayChart = mempty & #charts .~ unnamed (ts' <> [padChart 0.2 ts']) :: ChartOptions

disp $ mempty & #charts .~ stack 2 0.1 (reverse [toCT sdCharts, toCT qBetaChart, toCT qCountChart, toCT bucketChart, toCT decayChart])
#+end_src

#+RESULTS:
: True
